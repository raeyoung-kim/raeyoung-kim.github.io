<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://raeyoung-kim.github.io/</id><title>개발 노트</title><subtitle>A minimal, responsive, and powerful Jekyll theme for presenting professional writing.</subtitle> <updated>2023-01-15T00:54:21+09:00</updated> <author> <name>김래영</name> <uri>https://raeyoung-kim.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://raeyoung-kim.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="ko" href="https://raeyoung-kim.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2023 김래영 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Docker</title><link href="https://raeyoung-kim.github.io/posts/Docker/" rel="alternate" type="text/html" title="Docker" /><published>2023-01-15T00:00:00+09:00</published> <updated>2023-01-15T00:00:00+09:00</updated> <id>https://raeyoung-kim.github.io/posts/Docker/</id> <content src="https://raeyoung-kim.github.io/posts/Docker/" /> <author> <name>{"name"=>"kim rae young", "link"=>"https://github.com/raeyoung-kim"}</name> </author> <category term="Docker Study" /> <summary> 도커란? 도커는 컨테이너를 생성하고 관리하기 위한 도구입니다. 리눅스 컨테이너에 여러 기능을 추가하여 애플리케이션을 컨테이너로 조금 더 쉽게 사용할 수 있도록 만들어진 오픈소스 프로젝트로 go 언어로 작성되어 있습니다. 기존에 쓰이던 가상화 방법인 가상 머신과 달리 도커 컨테이너는 성능의 손실이 거의 없어 클라우드 인프라 솔루션으로 주목받고 있습니다. 도커에 관련된 프로젝트로 도커 컴포즈, 레지스트리, 도커 허브 등 여러가지가 있지만 일반적으로 도커는 도커 엔진 or 도커에 관련된 모든 프로젝트를 의미합니다. 도커 엔진은 컨테이너를 생성하고 관리하는 주체로 컨테이너를 제어할 수 있고 다양항 기능을 제공합니다. 도커의 생태계에 있는 여러 프로젝트들은 도커 엔진을 좀 더 효율적으로 사용... </summary> </entry> <entry><title>Class 클래스</title><link href="https://raeyoung-kim.github.io/posts/Class-%ED%81%B4%EB%9E%98%EC%8A%A4/" rel="alternate" type="text/html" title="Class 클래스" /><published>2022-12-04T00:00:00+09:00</published> <updated>2022-12-04T00:00:00+09:00</updated> <id>https://raeyoung-kim.github.io/posts/Class-%ED%81%B4%EB%9E%98%EC%8A%A4/</id> <content src="https://raeyoung-kim.github.io/posts/Class-%ED%81%B4%EB%9E%98%EC%8A%A4/" /> <author> <name>{"name"=>"kim rae young", "link"=>"https://github.com/raeyoung-kim"}</name> </author> <category term="Javascript" /> <summary> Class  자바스크팁트는 프로토타입 기반의 객체지향 언어입니다. static method or static properties 프로터타입에 할당되지 않고 생성자 함수 객체에 직접 할당되어있는 프로퍼티와 메소드를 static method, static properties라고 합니다. 생성자 함수를 new 연산자 없이 함수로써 호출할 때 사용됩니다. 인스턴스가 직접적으로 접근할 수 없습니다. prototype method 생성자 함수 프로토타입 내부에 할당된 메소드들을 prototype method라고 합니다. 인스턴스가 직접적으로 접근할 수 있습니다. 상속 상속을 사용하여 코드의 재사용성을 높일 수 있습니다. ES5 생성자 함수와 프로토타입, 클... </summary> </entry> <entry><title>객체 지향 Prototype</title><link href="https://raeyoung-kim.github.io/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-Prototype/" rel="alternate" type="text/html" title="객체 지향 Prototype" /><published>2022-12-04T00:00:00+09:00</published> <updated>2022-12-04T00:00:00+09:00</updated> <id>https://raeyoung-kim.github.io/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-Prototype/</id> <content src="https://raeyoung-kim.github.io/posts/%EA%B0%9D%EC%B2%B4-%EC%A7%80%ED%96%A5-Prototype/" /> <author> <name>{"name"=>"kim rae young", "link"=>"https://github.com/raeyoung-kim"}</name> </author> <category term="Javascript" /> <summary> 객체지향 프로그래밍 OOP(Object Oriented Programming) 이란? 서로 관련 있는 데이터와 함수를 객체(하나의 역할을 수행하는 메소드와 변수의 묶음)로 정의해서 서로 상호작용할 수 있도록 프로그래밍해나가는 것을 의미합니다. 각 객체는 메시지를 받을 수 있고, 데이터를 처리할 수도 있으며, 또 다른 객체에게 메시지를 전달할 수도 있습니다. 자바스크립트는 prototype을 기반으로 객체지향 프로그래밍을 해나갈 수 있습니다. 객체지향을 사용하면 중복되는 관련 객체를 재사용할 수 있어 중복을 어느 정도 줄일 수 있고, 관련 있는 객체들의 역할 분담을 좀 더 확실하게 할 수 있어 가독성이 높아지고 생산성과 유지보수 및 확장성이 높아집니다. 생성자 함수와 인스턴스 생성 ... </summary> </entry> <entry><title>Javascript This</title><link href="https://raeyoung-kim.github.io/posts/Javascript-This/" rel="alternate" type="text/html" title="Javascript This" /><published>2022-11-21T00:00:00+09:00</published> <updated>2022-11-21T00:00:00+09:00</updated> <id>https://raeyoung-kim.github.io/posts/Javascript-This/</id> <content src="https://raeyoung-kim.github.io/posts/Javascript-This/" /> <author> <name>{"name"=>"kim rae young", "link"=>"https://github.com/raeyoung-kim"}</name> </author> <category term="Javascript" /> <summary> 자바스크립트에서 this는 실행 컨텍스트가 생성될 때 바인딩됩니다. 즉, 함수가 호출될 때 this가 결정된다는 것입니다. 아래 소스를 보면 어떻게 호출했느냐에 따라 this가 달라집니다. var student = { name: "jennie", myName: function () { console.log(this.name); }, }; var myName = student.myName; myName(); // undefined student.myName(); // jennie 결과가 다른 이유는 myName()은 함수로 호출을 했고 student.myName()는 메소드로 호출했기 때문입니다. 함수 호출 시 모든 객체는 전역 객체의 프로퍼티입니다 전역 컨텍스트를 ... </summary> </entry> <entry><title>실행 컨텍스트</title><link href="https://raeyoung-kim.github.io/posts/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/" rel="alternate" type="text/html" title="실행 컨텍스트" /><published>2022-11-13T00:00:00+09:00</published> <updated>2022-11-13T00:00:00+09:00</updated> <id>https://raeyoung-kim.github.io/posts/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/</id> <content src="https://raeyoung-kim.github.io/posts/%EC%8B%A4%ED%96%89-%EC%BB%A8%ED%85%8D%EC%8A%A4%ED%8A%B8/" /> <author> <name>{"name"=>"kim rae young", "link"=>"https://github.com/raeyoung-kim"}</name> </author> <category term="Javascript" /> <summary> 실행 컨텍스트란? 자바스크립트가 실행되는 환경으로 함수를 실행할 때 필요한 조건, 환경정보를 제공하는 객체입니다. 실행 컨텍스트를 이해하면 Scope, hoisting, closure, this와 같은 중요한 동작을 이해할 수 있습니다. 실행 컨텍스트의 내부 var a = 1; function outer() { console.log(a); // 실행 순서(1): 1출력 function inner() { // var a; --&amp;gt; undefined (호이스팅) console.log(a); // 실행 순서(2): 1출력 var a = 3; } inner(); console.log(a); // 실행 순서(3): 1출력 } outer(); co... </summary> </entry> </feed>
